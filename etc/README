This directory gives an example template pam-script,  which in this
case does nothing more than log the various PAM_* environment variables
to a log file /tmp/pam-script.log  which can be pretty informative
as to what services use the PAM stack, and what information is collected
and passed along.

The acceptable list of scripts that are invoked by pam-script is:
	pam_script_auth
	pam_script_acct
	pam_script_passwd
	pam_script_ses_open
	pam_script_ses_close

The default behavior for pam-script is to fail if it can not find a script.
However, this is only the pam_script.so module is placed into the PAM stack
in either /etc/pam.conf or in the various /etc/pam.d/ services.

To try out the pam-script.so module with the various module-types, it's
easiest to edit the individual common service configuration files.

For Ubuntu/Debian:
	cat >>/etc/pam.d/common-account <<!
account	optional	pam_script.so
!
	cat >>/etc/pam.d/common-auth <<!
auth	optional	pam_script.so
!
	cat >>/etc/pam.d/common-password <<!
password	optional	pam_script.so
!
	cat >>/etc/pam.d/common-session <<!
session	optional	pam_script.so
!

For RedHat/Fedora:
	cat >> /etc/pam.d/system-auth <<!
account		optional	/lib/security/$ISA/pam_script.so
auth		optional	/lib/security/$ISA/pam_script.so
password	optional	/lib/security/$ISA/pam_script.so
session		optional	/lib/security/$ISA/pam_script.so
!

The RedHat system-auth is generated by authconfig, so these changes will
vanish unless measures are taken.

For this case, pam_script.so is optional so any failures should not affect
the rest of the PAM stack.  However, be careful though.  A mistake could
render your system inoperable and you may not be able to login easily to fix
the errant PAM configuration.

